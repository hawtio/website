{"componentChunkName":"component---src-templates-docs-template-js","path":"/docs/online/generate-certificates/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"generating-certificates-manually\" style=\"position:relative;\"><a href=\"#generating-certificates-manually\" aria-label=\"generating certificates manually permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating Certificates Manually</h1>\n<p>You can generate <em>proxying</em> and <em>serving</em> certificates manually.</p>\n<h2 id=\"proxing\" style=\"position:relative;\"><a href=\"#proxing\" aria-label=\"proxing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxing</h2>\n<p>For OpenShift, here are the steps to be performed:</p>\n<ol>\n<li>\n<p>First, retrieve the service signing certificate authority keys, by executing the following commmands as a <em>cluster-admin</em> user:</p>\n<pre><code class=\"language-sh\"># The CA certificate\n$ oc get secrets/signing-key -n openshift-service-ca -o \"jsonpath={.data['tls\\.crt']}\" | base64 --decode > ca.crt\n# The CA private key\n$ oc get secrets/signing-key -n openshift-service-ca -o \"jsonpath={.data['tls\\.key']}\" | base64 --decode > ca.key\n</code></pre>\n</li>\n<li>\n<p>Then, generate the client certificate, as documented in <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/certificates/\">Kubernetes certificates administration</a>, using either <code>easyrsa</code>, <code>openssl</code>, or <code>cfssl</code>, e.g., using <code>openssl</code>:</p>\n<pre><code class=\"language-sh\"># Generate the private key\n$ openssl genrsa -out server.key 2048\n# Write the CSR config file\n$ cat &#x3C;&#x3C;EOT >> csr.conf\n[ req ]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[ dn ]\nCN = hawtio-online.hawtio.svc\n\n[ v3_ext ]\nauthorityKeyIdentifier=keyid,issuer:always\nkeyUsage=keyEncipherment,dataEncipherment,digitalSignature\nextendedKeyUsage=serverAuth,clientAuth\nEOT\n# Generate the CSR\n$ openssl req -new -key server.key -out server.csr -config csr.conf\n# Issue the signed certificate\n$ openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 10000 -extensions v3_ext -extfile csr.conf\n</code></pre>\n</li>\n<li>\n<p>Finally, you can create the secret to be mounted in Hawtio Online, from the generated certificate:</p>\n<pre><code class=\"language-sh\">$ oc create secret tls hawtio-online-tls-proxying --cert server.crt --key server.key\n</code></pre>\n</li>\n</ol>\n<p>Note that <code>CN=hawtio-online.hawtio.svc</code> must be trusted by the Jolokia agents, for which client certification authentication is enabled. See the <code>clientPrincipal</code> parameter from the <a href=\"https://jolokia.org/reference/html/agents.html#agent-jvm-config\">Jolokia agent configuration options</a>.</p>\n<h2 id=\"serving\" style=\"position:relative;\"><a href=\"#serving\" aria-label=\"serving permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serving</h2>\n<p>You can follow the steps below to create a secret named <code>hawtio-online-tls-serving</code> with the serving certificate:</p>\n<ol>\n<li>\n<p>Prepare a TLS certificate and private key for Hawtio Online. For development purposes, you can generate a self-signed certificate with the following commmands:</p>\n<pre><code class=\"language-sh\"># Generate the private key\n$ openssl genrsa -out tls.key 2048\n# Generate the certificate (valid for 365 days)\n$ openssl req -x509 -new -nodes -key tls.key -subj \"/CN=hawtio-online.hawtio.svc\" -days 365 -out tls.crt\n</code></pre>\n</li>\n<li>\n<p>Create the secret to be mounted in Hawtio Online from the certificate and private key in the first step:</p>\n<pre><code class=\"language-sh\">$ kubectl create secret tls hawtio-online-tls-serving --cert tls.crt --key tls.key\n</code></pre>\n</li>\n</ol>","frontmatter":{"title":""}}},"pageContext":{"slug":"/docs/online/generate-certificates/"}}}